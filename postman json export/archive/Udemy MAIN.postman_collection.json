{
	"info": {
		"_postman_id": "301e9979-8f79-4f2e-9f66-ccf19f7085f4",
		"name": "Udemy MAIN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25289468"
	},
	"item": [
		{
			"name": "GET all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response body: JSON value check (simple version - compare with Get all posts)\r",
							"// verify if body has value (search in a specific place) \r",
							"pm.test(\"Verify value of driver1 property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].driver1).to.eql('Charles Leclerc');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{baseURL}}:3000/posts",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET single post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response body: Contains string\r",
							"// verify if body contains string (search everywhere)\r",
							"pm.test(\"Verify driver\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Max Verstappen\");\r",
							"});\r",
							"\r",
							"// Response body: JSON value check (simple version - compare with Get all posts)\r",
							"// verify if body has value (search in a specific place) \r",
							"pm.test(\"Verify value of team property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.team).to.eql('Red Bull');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}}:3000/posts/1",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET filter posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}}:3000/posts?title=json-server&author=typicode&id=1",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "title",
							"value": "json-server"
						},
						{
							"key": "author",
							"value": "typicode"
						},
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST add new post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"team\": \"Cadillac\",\r\n        \"driver1\": \"unknown name\",\r\n        \"driver2\": \"unknown name\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseURL}}:3000/posts",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT overwrite post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"driver1\": \"Pierre Gasly\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseURL}}:3000/posts/240",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts",
						"240"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH update post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Response body: JSON value check (simple version - compare with Get all posts)\r",
							"// get the value from global variable\r",
							"// verify if body has value (search in a specific place) \r",
							"pm.test(\"Verify value of driver2 property - from global variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.driver2).to.eql(pm.globals.get(\"futureChampionDriver\"));\r",
							"});\r",
							"pm.test(\"Verify value of driver3 & city property - from dynamic variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.driver3).to.eql(pm.environment.get(\"fullName\"));\r",
							"    pm.expect(jsonData.city).to.eql(pm.environment.get(\"city\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// setting a dynamic variable\r",
							"//pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"// czyli przed wysłaniem żądania ustawiamy zmienną środowiskową o nazwie 'fullName'\r",
							"// do której przypisujemy wartość zmiennej wygenerowanej dynamicznie\r",
							"// i możemy w body albo teście odwołać się do tej zmiennej\r",
							"pm.environment.set(\"fullName\", pm.variables.replaceIn('{{$randomFullName}}'))\r",
							"pm.environment.set(\"city\", pm.variables.replaceIn('{{$randomCity}}'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"driver2\": \"{{futureChampionDriver}}\",\r\n        \"driver3\": \"{{fullName}}\",\r\n        \"city\": \"{{city}}\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseURL}}:3000/posts/4",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEL delete post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code: Code is 200\r",
							"// verify server response\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}}:3000/posts/200",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"port": "3000",
					"path": [
						"posts",
						"200"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Status code: Successful POST request (useful for shared tests)",
					"// Verify that server response is one of given",
					"pm.test(\"Successful server response codes\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 404]);",
					"});"
				]
			}
		}
	]
}